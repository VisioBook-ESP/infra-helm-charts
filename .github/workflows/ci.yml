name: Helm CI Pipeline

on:
  push:
  pull_request:

jobs:
  lint:
    name: üß™ Helm Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.0
      - name: Lint all charts
        run: |
          helm lint charts/* --strict
          helm lint environnement/dev/charts/* --strict

  template:
    name: üìÑ Helm Template Validation
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: azure/setup-helm@v3
        with:
          version: v3.14.0
      - name: Template all charts
        run: |
          helm template charts/*
          helm template environnement/dev/charts/*

  unittest:
    name: ‚úÖ Helm Unit Tests
    runs-on: ubuntu-latest
    needs: template
    steps:
      - uses: actions/checkout@v4
      - uses: azure/setup-helm@v3
        with:
          version: v3.14.0
      - name: Install helm-unittest plugin
        run: helm plugin install https://github.com/helm-unittest/helm-unittest
      - name: Run helm-unittest
        run: |
          helm unittest charts/* || true
          helm unittest environnement/dev/charts/* || true

  kubeval:
    name: üîç Validate with kubeval
    runs-on: ubuntu-latest
    needs: unittest
    steps:
      - uses: actions/checkout@v4
      - name: Install kubeval
        run: |
          curl -sL https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
          sudo mv kubeval /usr/local/bin/
      - name: Validate Helm templates with kubeval
        run: |
          for chart in charts/* environnement/dev/charts/*; do
            if [ -f "$chart/Chart.yaml" ]; then
              echo "üîç Validating $chart"
              helm template "$chart" | kubeval --ignore-missing-schemas --strict
            fi
          done

  minikube:
    name: üèóÔ∏è Deploy & Test ALL Charts on Minikube
    runs-on: ubuntu-latest
    needs: kubeval
    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          KUBECTL_VERSION="v1.30.1"
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      - name: Setup Minikube
        uses: medyagh/setup-minikube@latest
        with:
          kubernetes-version: v1.30.1

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.0

      - name: Deploy & test all charts
        run: |
          set -e
          for chart in charts/* environnement/dev/charts/*; do
            if [ -f "$chart/Chart.yaml" ]; then
              release=$(basename $chart)
              echo "üöÄ Deploying chart: $release"
          
              # Installation du chart
              helm upgrade --install $release $chart --wait --timeout 180s || {
                echo "‚ùå Helm install failed for $release"
                exit 1
              }
          
              echo "‚úÖ Chart $release deployed"
          
              # R√©cup√©rer le service associ√© (si existe)
              svc=$(kubectl get svc -l "app.kubernetes.io/instance=$release" -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)

              if [ -n "$svc" ]; then
                echo "üîç Service found for $release: $svc"
                # Port-forward dans le background
                nohup kubectl port-forward svc/$svc 8080:80 >/dev/null 2>&1 &
                sleep 5
                echo "üåê Testing service for $release"
                curl --max-time 10 --retry 5 --retry-delay 5 http://127.0.0.1:8080 || echo "‚ö†Ô∏è Curl failed for $release"
                kill $(jobs -p) || true
              else
                echo "‚ö†Ô∏è No service found for $release, skipping curl test"
              fi
            fi
          done
