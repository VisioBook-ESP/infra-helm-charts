name: Helm Unit Tests

on:
  push:
  pull_request:

jobs:
  lint:
    name: üß™ Helm Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.0

      - name: Lint all charts
        run: |
          helm lint environnement/dev/charts/* --strict


  validate:
    name: üìÑ Helm Template Validation
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.0

      - name: Validate Helm templates (per chart, valid release name)
        shell: bash
        run: |
          shopt -s nullglob
          for chart in environnement/dev/charts/*; do
            if [ -f "$chart/Chart.yaml" ]; then
              name=$(basename "$chart" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | cut -c1-53 | sed 's/^-//; s/-$//')
              echo "üìÑ Rendering: $chart (release=$name)"
              helm template "$name" "$chart" >/dev/null
            fi
          done

  unittest:
    name: ‚úÖ Helm Unit Tests
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.0

      - name: Install helm-unittest plugin
        run: helm plugin install https://github.com/helm-unittest/helm-unittest

      - name: Run helm-unittest on all charts
        run: |
          cd environnement/dev
          helm unittest charts/*

  kubeval:
    name: üîç Validate Kubernetes Manifests with kubeval
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubeval
        run: |
          curl -sL https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
          sudo mv kubeval /usr/local/bin/

      - name: Run kubeval on Helm templates (per chart, valid release name)
        shell: bash
        run: |
          shopt -s nullglob
          for chart in environnement/dev/charts/*; do
            if [ -f "$chart/Chart.yaml" ]; then
              name=$(basename "$chart" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | cut -c1-53 | sed 's/^-//; s/-$//')
              echo "üîç Validating with kubeval: $chart (release=$name)"
              helm template "$name" "$chart" | kubeval --ignore-missing-schemas --strict
            fi
          done

  minikube:
    name: üèóÔ∏è Deploy & Test ALL Charts on Minikube
    runs-on: ubuntu-latest
    needs: kubeval
    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          KUBECTL_VERSION="v1.30.1"
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      - name: Setup Minikube
        uses: medyagh/setup-minikube@latest
        with:
          kubernetes-version: v1.30.1

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.0

      - name: Deploy & test all charts (with per-chart port-forward)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
  
          declare -A REMOTE_PORTS=(
            [nginx]=80
            [nuxt]=3000
            [express]=3000
          )
   
          declare -A LOCAL_PORTS=(
            [nginx]=8080
            [nuxt]=8080
            [express]=3000
          )
  
          cleanup_pf() { jobs -p | xargs -r kill || true; }
          trap cleanup_pf EXIT
  
          for chart in environnement/dev/charts/*; do
            if [ -f "$chart/Chart.yaml" ]; then
              release="$(basename "$chart")"
              echo "üöÄ Deploying chart: $release"
  
              helm upgrade --install "$release" "$chart" --wait --timeout 180s || {
                echo "‚ùå Helm install failed for $release"
                exit 1
              }
              echo "‚úÖ Chart $release deployed"
  
              svc="$(kubectl get svc -l "app.kubernetes.io/instance=$release" -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)"
  
              if [ -z "$svc" ]; then
                echo "‚ö†Ô∏è  No service found for $release, skipping curl test"
                continue
              fi
              echo "üîç Service found for $release: $svc"
  
              remote_port="${REMOTE_PORTS[$release]:-}"
              if [ -z "${remote_port}" ]; then
                remote_port="$(kubectl get svc "$svc" -o jsonpath='{.spec.ports[0].port}' 2>/dev/null || true)"
              fi
  
              if [ -z "${remote_port}" ]; then
                echo "‚ö†Ô∏è  Could not determine remote port for $release, skipping curl test"
                continue
              fi
  
              local_port="${LOCAL_PORTS[$release]:-8080}"
  
              echo "üîå Port-forward $svc : ${local_port}:${remote_port}"
              nohup kubectl port-forward "svc/${svc}" "${local_port}:${remote_port}" >/dev/null 2>&1 &
              for i in {1..10}; do
                sleep 1
                (curl -sSf "http://127.0.0.1:${local_port}" >/dev/null && break) || true
              done
  
              echo "üåê Testing service for $release on http://127.0.0.1:${local_port}"
              if ! curl --fail --max-time 10 "http://127.0.0.1:${local_port}"; then
                echo "‚ö†Ô∏è  Curl failed for $release"
              fi
  
              cleanup_pf
            fi
          done
